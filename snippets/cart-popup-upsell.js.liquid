const upsellPrefix = "upsell";
const cartUpsellClass = `cart-upsell`;

const upsellClasses = {
  item: `${cartUpsellClass}-item`,
  title: `${cartUpsellClass}-title`,
  image: `${cartUpsellClass}-image`,
  price: `${cartUpsellClass}-price`,
  splide: `${cartUpsellClass}-splide-container`,
  splideSlide: `splide__slide`,
  splidePrevArrow: `splide__arrow--prev`,
  splideNextArrow: `splide__arrow--next`,
  addToCart: `${cartUpsellClass}-add-to-cart`,
  loading: `${cartUpsellClass}-loading`,
};

const $upsellSelectors = {
  $upsell: () => {
    return $(`.${cartUpsellClass}`);
  },
  $upsellLoading: () => {
    return $(`.${upsellClasses.loading}`);
  },
  $splideContainer: () => {
    return $(`.${upsellClasses.splide}`);
  },
  $splidePrevArrow: () => {
    return $(`.${upsellClasses.splidePrevArrow}`);
  },
  $splideNextArrow: () => {
    return $(`.${upsellClasses.splideNextArrow}`);
  },
  $productWrapper: (productID) => {
    return $(`[${upsellPrefix}-${productID}]`);
  },
  $title: (productID) => {
    return $(`[${upsellPrefix}-${productID}] > .${upsellClasses.title}`);
  },
  $image: (productID) => {
    return $(`[${upsellPrefix}-${productID}] > .${upsellClasses.image}`);
  },
  $price: (productID) => {
    return $(`[${upsellPrefix}-${productID}] > .${upsellClasses.price}`);
  },
  $addToCart: (productID) => {
    return $(`[${upsellPrefix}-${productID}] > .${upsellClasses.addToCart}`);
  },
};

function cartPopupUpsellSetLoading() {
  $upsellSelectors.$upsellLoading().css({ display: "block" });
}

function cartPopupUpsellSetLoaded() {
  $upsellSelectors.$upsellLoading().css({ display: "none" });
  // TOD:
  // Triggered so that correct height is set to the items, before cart is opened
  setNewHeightForVisibleItemsInCartOnResize($itemSelectors.$itemsWrapper());
}

function cartPopupUpsellGenerateProductHTML(product, withWrapper = true) {
  if(!product) return;
  const productVariant = product.variants[0];
  const productimage = `<img data-src="${getImageCustomSize(product.media[0].src, 200)}"  class="lazyload" alt="${productVariant.name}"/>`;
  const ptoductUrl = "/products/" + product.handle;



  var productVariant_name_html = productVariant.name.replace("Innermost", "")
  var productVariant_name_text = productVariant.name;
  productVariant_name_html = `<a href="${ptoductUrl}" data-producttitle="${productVariant_name_text}" >${productVariant_name_html}</a>`;
  

  const wrapperOpen = withWrapper
    ? `<div class="${upsellClasses.splideSlide} ${upsellClasses.item}" ${upsellPrefix}-${productVariant.id} data-producttitle='${productVariant_name_text}' >`
    : "";
  const wrapperclose = withWrapper ? `</div>` : "";
    
    {% for product in collections.pepper-cart-gifts.products %}
    	{% if settings.enable_gifts %}
          if(productVariant.id === {{ product.selected_or_first_available_variant.id }}) {
              return
          } 
       	{% endif %}
    {% endfor %}
             
  var product_price_html = productVariant.price;
  if( !product_price_html || typeof product_price_html == "undefined"){
    product_price_html = product.price;
  }

  return `
        ${wrapperOpen}
          <div class="${upsellClasses.addToCart}" data-producttitle="${productVariant_name_text}" >Add to Cart</div>        
          <div class="${upsellClasses.image}"><a href="${ptoductUrl}" data-producttitle="${productVariant_name_text}" >${productimage}</a></div>
          <div class="${upsellClasses.title}">${productVariant_name_html}</div>
          <div class="${upsellClasses.price}">${formatMoney(product_price_html, moneyFormat)}</div>
        ${wrapperclose}`;
}

function cartPopupUpsellAddProduct(product) { 
  const productHtml = cartPopupUpsellGenerateProductHTML(product);
  $upsellSelectors.$upsell().append(productHtml);

  cartPopupUpsellProductAttachEvent(product.variants[0]);
  updateUpsellCurrency();

}

function updateUpsellCurrency(){
  
  // Upsell items price
  $(`.${upsellClasses.item}`).each(function(){
    const productHandle = $(this).find(`.${upsellClasses.image} a`).attr("href");
    if(!cartBill.domain || !productHandle ) return;
    $.ajax({
      method: 'GET',
      url: `https://${cartBill.domain}${productHandle}.json`,
      dataType: 'json',
      success: data => {
        const variants = data.product.variants;
        for (variant in variants) {
          const price = variants[variant].price;
          const total = `${cartBill.currency}${ price }`;
          $(this).find(`.${upsellClasses.price}`).text(total);
        }
      }
    })
  })
}


function cartPopupUpsellProductAttachEvent(product) {
  $upsellSelectors.$addToCart(product.id).click(() => {
    $upsellSelectors.$addToCart(product.id).trigger(cartEvents.upsell.addToCart, { product });
	$upsellSelectors.$addToCart(product.id).unbind("click");
  });
 $upsellSelectors.$addToCart(product.id).keyup((e) => {
    e.preventDefault();
    if(e.key === "Enter"){
        $upsellSelectors.$addToCart(product.id).trigger(cartEvents.upsell.addToCart, { product });
        $upsellSelectors.$addToCart(product.id).unbind("click");
    }
  });
}

function cartPopupUpsellPopulate() {
  var upsellProducts_to_render = upsellProducts;
  $('.cart-upsell-main-title').text(upsell_main_title_related_by_option);
 
  upsellProducts_to_render.forEach((product) => {
    const isUpsellProductAlreadyInCart = cart.items.find((item) => item.id === product.variants[0].id);
    const isProductAvailable = product.variants[0].available;  

    isProductAvailable && !isUpsellProductAlreadyInCart && cartPopupUpsellAddProduct(product);
  });

  cartUpsellMainTitleToggle();
}

function cartUpsellMainTitleToggle(){
  if( $(`.${upsellClasses.item}`).length > 0){
    $('.cart-upsell-main-title').show();
  }
  else {
    $('.cart-upsell-main-title').hide();
  }
}

function activateUpsellProductsRelatedByOption(){
  var upsell_url_hash = window.location.hash;
  var upsell_cookie_name = 'wearpepper_bra_upsell';
  var upsell_cookie_val = cartPopupGetCookie(upsell_cookie_name);
  //console.log('upsell',upsell_url_hash,upsell_cookie_val);
  
  if(upsell_url_hash == "#bra" || upsell_cookie_val){
    cartPopupSetCookie(upsell_cookie_name, 1, 30);
    return {{collections['upsell-products-related-by-option'].products | json}};
  } else {
    return [];
  }
}


function getProductWithSingleVariant(variant_id, product){
  if(!product) return;
  {% comment %}Returns copy of the product, but with only one variant selected by variant_id{% endcomment %}
  var temp_product = JSON.parse(JSON.stringify(product));
  product.variants.forEach((v) => {
    if(v.id == variant_id){
      {% comment %}keep only the matched variant{% endcomment %}
      temp_product.variants = [];
      temp_product.variants.push(v);
    }
  });
  return temp_product;
}


function addUpsellToCart(product) {
  const $productSelector = $upsellSelectors.$productWrapper(product.id);
  const productData = {
    id: product.id,
    quantity: 1,
    properties: { _fromUpsell: true },
  };

  cartPopupProgressBarSetCalculating();

  const onSuccess = ({ items }) => {
    $productSelector.trigger(cartEvents.item.addToCart, items[0]);
    const { slides } = splide.Components.Elements;

    slides.forEach((slide, index) => {
      if (slide.hasAttribute(`${upsellPrefix}-${product.id}`)) {
        splide.remove(index);

        if (slides.length === 1) {
          cartPopupUpsellDisableNextArrow();
          cartPopupUpsellDisablePrevArrow();
        }

        if (slides.length > 1 && slides.length === index + 1) {
          cartPopupUpsellDisableNextArrow();
          cartPopupUpsellEnablePrevArrow();
        }

        // 2 items adding the last item
      }
    });

    cartPopupIsUpsellEmpty() && $upsellSelectors.$splideContainer().trigger(cartEvents.upsell.upsellIsEmpty);
    //cartPopupProgressBarUpdate();
    // checkIfDeviceIsMobile() &&
    //   document.getElementsByClassName("cart-popup")[0].scrollTo({ top: 0, behavior: "smooth" });

    cartUpsellMainTitleToggle();
  };

  const onFail = (res) => {
    console.log("adding upsell item to the cart failed");
    // 422 possible -> item sold out
    // 500 possible -> network error
    console.log(res);
    //cartPopupProgressBarUpdate();
  };

  cartAddItem(productData, onSuccess, onFail);
}

function removeUpsellFromCart(item) {
  $(document).trigger(cartEvents.upsell.removeFromCart, { item });
}

function cartPopupUpsellShowRemovedProduct(product_variant) {
  var removedProductIndex = upsellProducts.findIndex(({ variants }) => variants[0].id === product_variant.id);
  var removedProduct = upsellProducts[removedProductIndex];
  if(removedProductIndex == -1 && upsellProductsRelatedByOption.length > 0){
    {% comment %}the removed upsell P is not in the default upsellProducts, so we check it in the next upsell collection{% endcomment %}
    removedProductIndex = upsellProductsRelatedByOption.findIndex(({ variants }) => {
      var variant_index = variants.findIndex(variant => variant.id === product_variant.id );
      return variant_index > -1;
    });
    removedProduct = getProductWithSingleVariant(product_variant.id, upsellProductsRelatedByOption[removedProductIndex]);
  }

  const removedProductHtml = cartPopupUpsellGenerateProductHTML(removedProduct, false);

  const removedProductElement = document.createElement("div");
  removedProductElement.innerHTML = removedProductHtml;
  removedProductElement.className = `${upsellClasses.splideSlide} ${upsellClasses.item}`;
  removedProductElement.setAttribute(`${upsellPrefix}-${product_variant.id}`, "");

  splide.add(removedProductElement);

  // TOD:
  // show upsell if all items were removed and this is the first item to be added again
  let showUpsell = splide.Components.Elements.slides.length > 0;
  showUpsell && $(document).trigger(cartEvents.upsell.upsellIsNoLongerEmpty);

  cartPopupUpsellProductAttachEvent(product_variant);
}

function cartPopupIsUpsellEmpty(upsellItemsInCart = 0, upsellItemsAvailable = 0) {
  return $.isEmptyObject(splide)
    ? upsellItemsInCart === upsellItemsAvailable
    : splide.Components.Elements.slides.length
    ? false
    : true;
}

document.addEventListener("DOMContentLoaded", (event) => {
  $(document).on(cartEvents.upsell.addToCart, (e, { product }) => {
    addUpsellToCart(product);
  });

  $(document).on(cartEvents.upsell.removedFromCart, (e, variants) => {
    cartPopupUpsellShowRemovedProduct(variants);

    if (splide.Components.Elements.slides.length === 1) {
      cartPopupUpsellDisableNextArrow();
      cartPopupUpsellDisablePrevArrow();
    }

    if (splide.Components.Elements.slides.length > 1) {
      cartPopupUpsellEnableNextArrow();
    }

    cartUpsellMainTitleToggle();
  });

  $(document).on(cartEvents.upsell.upsellIsEmpty, (e) => {
    $upsellSelectors.$splideContainer().hide();
    $(window).trigger("resize", e);
  });

  $(document).on(cartEvents.upsell.upsellIsNoLongerEmpty, (e) => {
    cartPopupUpsellSetLoaded();
    $upsellSelectors.$splideContainer().show();

    // TOD:
    // https://stackoverflow.com/questions/65448012/wait-for-css-of-element-to-be-updated-when-it-is-dynamically-changed-with-js-jqu/65448148
    setTimeout(() => {
      $(window).trigger("resize");
      splide.refresh();
    });
  });
});

function cartPopupUpsellDisablePrevArrow() {
  $upsellSelectors.$splidePrevArrow().css({ display: "none" });
}

function cartPopupUpsellDisableNextArrow() {
  $upsellSelectors.$splideNextArrow().css({ display: "none" });
}

function cartPopupUpsellEnablePrevArrow() {
  $upsellSelectors.$splidePrevArrow().css({ display: "initial" });
}

function cartPopupUpsellEnableNextArrow() {
  $upsellSelectors.$splideNextArrow().css({ display: "initial" });
}

// if upsell is empty (all items already in cart) -> page refreshed -> upsell stays on loaded on first open ->
// -> close cart -> open cart, upsell is now correctly loaded


function refreshCartUpsell(){
    {% comment %}
      This refreshes the upsells suggestions. In most cases we could skip this,
      but when we have additional upsells (by bra size/color) - we have to refresh it.
    {% endcomment %}
    $upsellSelectors.$splideContainer().find(".cart-upsell-item").remove();
    cartPopupUpsellPopulate();
    if (splideInitialized) {
      splide.refresh();

      if(splide.Components.Elements.slides.length < 2){
        cartPopupUpsellDisablePrevArrow();
        cartPopupUpsellDisableNextArrow();
      }
    }
}

//temporaly cookies stuff
{% comment %}copied code from theme.js{% endcomment %}
function cartPopupSetCookie(cname, cvalue, exdays) {
  var d = new Date();
  d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
  var expires = "expires="+d.toUTCString();
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function cartPopupGetCookie(cname) {
  var name = cname + "=";
  var ca = document.cookie.split(';');
  for(var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length); //the cvalue of the cookie
    }
  }
  return "";
}

function cartPopupCheckCookie(cname) {
  var cookie = getCookie(cname);
  if (cookie != "") { //cookie exists
    //console.log('');
  } else {
    setCookie(cname, 'some val', 30);
  }
}
//end temporaly cookies stuff