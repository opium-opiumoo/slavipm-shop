function populateCartObject(retrievedCart) {
  Object.keys(retrievedCart).forEach((cartKey) => {
    cart[cartKey] = retrievedCart[cartKey];

    // TOD:
    // calculate how many items from the upsell are already in the cart
    // so that we can disable the upsell if all items are in cart
    if (cartKey === "items") {
      retrievedCart[cartKey].forEach((item) => {
        if (item.properties) {
          if (item.properties._fromUpsell) {
            upsellItemsInCart++;
          }
        }
      });
    }
  });
}

function getImageCustomSize(image, imgSize) {
  let itemImgIndexOfFormat = "";
  let itemImageURLStart = "";
  if(image.indexOf(".jpg") > -1){
     itemImgIndexOfFormat = image.indexOf(".jpg");
     itemImageURLStart = image.slice(0, itemImgIndexOfFormat);
  }
  if(image.indexOf(".png") > -1){
     itemImgIndexOfFormat = image.indexOf(".png");
     itemImageURLStart = image.slice(0, itemImgIndexOfFormat);
  }
  const itemImgURLInsert = `_${imgSize}x`;
  const itemImgURLEnd = image.slice(itemImgIndexOfFormat);
  
  return itemImageURLStart + itemImgURLInsert + itemImgURLEnd;
}

function formatMoney(cents, format) {
  if (typeof cents === "string") {
    cents = cents.replace(".", "");
  }

  var value = "";
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = format || moneyFormat;

  function formatWithDelimiters(number, precision, thousands, decimal) {
    thousands = thousands || ",";
    decimal = decimal || ".";

    if (isNaN(number) || number === null) {
      return 0;
    }

    number = (number / 100.0).toFixed(precision);

    var parts = number.split(".");
    var dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + thousands);
    var centsAmount = parts[1] ? decimal + parts[1] : "";

    return dollarsAmount + centsAmount;
  }

  switch (formatString.match(placeholderRegex)[1]) { 
    case "amount":
      value = formatWithDelimiters(cents, 2);
      break;
    case "amount_no_decimals":
      value = formatWithDelimiters(cents, 0);
      break;
    case "amount_with_comma_separator":
      value = formatWithDelimiters(cents, 2, ".", ",");
      break;
    case "amount_no_decimals_with_comma_separator":
      value = formatWithDelimiters(cents, 0, ".", ",");
      break;
    case "amount_no_decimals_with_space_separator":
      value = formatWithDelimiters(cents, 0, " ");
      break;
    case "amount_with_apostrophe_separator":
      value = formatWithDelimiters(cents, 2, "'");
      break;
  }
  return formatString.replace(placeholderRegex, value);
}

function checkIfDeviceIsMobile() { 
  // https://coderwall.com/p/i817wa/one-line-function-to-detect-mobile-devices-with-javascript
  const isMobile = typeof window.orientation !== "undefined" || navigator.userAgent.indexOf("IEMobile") !== -1;

  return isMobile;
}

function setNewHeightForVisibleItemsInCartOnResize($itemsSelector, data) {
  if (!checkIfDeviceIsMobile()) {
    const viewedHeight = $(window).height();

    // all values are in px unless specified otherwise
    const heightForHeader = $(".cart-popup__header").outerHeight();
    const heightForProgressBar = $(".cart-popup-shipping").outerHeight();
    const heightForCheckout = $(".cart-popup-checkout").outerHeight();
    const defaultHeightForUpsell = $(".cart-upsell").outerHeight();
    const heightForUpsell = data ? data.type === cartEvents.upsell.upsellIsEmpty && 0 : defaultHeightForUpsell;
    const totalConstantHeight = heightForHeader + heightForProgressBar + heightForCheckout + heightForUpsell;
    const remainingVHForItems = 1 - totalConstantHeight / viewedHeight; // %

    const heightForVisibleItems = remainingVHForItems * viewedHeight;
    
    $itemsSelector.css({ height: heightForVisibleItems });
  }
}

/**
 *
 * Get the currency symbol
 * 
 */

const getCurrencyNominal = currency => {
  let nominal = '$';

  switch (currency) {
    case 'GBP':
      nominal = '£';
      break;
    case 'USD':
    case 'AUD':
    case 'USD':
    case 'CADQ':
      nominal = '$';
      break;
    case 'EUR':
      nominal = '€';
      break;
  }

  return nominal;
}

/**
 *  Get cart data.
 *
 * @return  {Object}
 */
const getCardInfo = () => {
	return fetch('/cart.js')
		.then(response => response.json())
};
